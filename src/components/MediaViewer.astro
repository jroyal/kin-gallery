---
export interface Props {
	mediaId?: number;
	mediaList?: any[];
	isSlideshow?: boolean;
	showControls?: boolean;
}

const { 
	mediaId,
	mediaList = [],
	isSlideshow = false,
	showControls = true
} = Astro.props;

// Mock current media item
const currentMedia = {
	id: mediaId || 1,
	filename: 'photo1.jpg',
	type: 'photo',
	width: 1920,
	height: 1080,
	taken_at: '2025-07-13T14:30:00Z',
	child_name: 'Amelia',
	comments: [
		{
			id: 1,
			user_name: 'Mom',
			body: 'Such a beautiful moment! ðŸ’•',
			created_at: '2025-07-13T15:00:00Z'
		},
		{
			id: 2,
			user_name: 'Grandma',
			body: 'She\'s getting so big!',
			created_at: '2025-07-13T15:30:00Z'
		}
	],
	reactions: {
		hearts: 5,
		user_has_reacted: false
	}
};

// Mock media list for slideshow
const mockMediaList = mediaList.length > 0 ? mediaList : [
	currentMedia,
	{
		id: 2,
		filename: 'video1.mp4',
		type: 'video',
		width: 1920,
		height: 1080,
		taken_at: '2025-07-13T12:15:00Z',
		child_name: 'Amelia'
	},
	{
		id: 3,
		filename: 'photo2.jpg',
		type: 'photo',
		width: 600,
		height: 800,
		taken_at: '2025-07-13T10:45:00Z',
		child_name: 'Amelia'
	}
];

const currentIndex = mockMediaList.findIndex(m => m.id === currentMedia.id);
const isVideo = currentMedia.type === 'video';
---

<div id="media-viewer" class="fixed inset-0 bg-black z-50 flex flex-col">
	<!-- Header -->
	<div class="flex items-center justify-between p-4 text-white bg-gradient-to-b from-black/50 to-transparent">
		<button 
			onclick="closeMediaViewer()"
			class="p-2 hover:bg-white/20 rounded-lg transition-colors"
		>
			<svg class="w-6 h-6" fill="currentColor" viewBox="0 0 24 24">
				<path d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"/>
			</svg>
		</button>

		<div class="text-center flex-1">
			{isSlideshow && (
				<div class="text-sm opacity-80">
					{currentIndex + 1} of {mockMediaList.length}
				</div>
			)}
			<div class="text-sm font-medium">
				{currentMedia.child_name} â€¢ {new Date(currentMedia.taken_at).toLocaleDateString()}
			</div>
		</div>

		<div class="flex items-center space-x-2">
			{/* AirPlay button for slideshow */}
			{isSlideshow && (
				<button 
					onclick="showAirPlayPicker()"
					class="p-2 hover:bg-white/20 rounded-lg transition-colors"
					title="AirPlay to TV"
				>
					<svg class="w-6 h-6" fill="currentColor" viewBox="0 0 24 24">
						<path d="M6 22h12l-6-6-6 6zM21 3H3c-1.1 0-2 .9-2 2v10c0 1.1.9 2 2 2h4v-2H3V5h18v10h-4v2h4c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z"/>
					</svg>
				</button>
			)}

			<!-- More options -->
			<button 
				onclick="showMediaOptions()"
				class="p-2 hover:bg-white/20 rounded-lg transition-colors"
			>
				<svg class="w-6 h-6" fill="currentColor" viewBox="0 0 24 24">
					<path d="M12 8c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0 2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"/>
				</svg>
			</button>
		</div>
	</div>

	<!-- Media Display Area -->
	<div class="flex-1 flex items-center justify-center relative">
		{/* Navigation arrows for slideshow */}
		{isSlideshow && showControls && currentIndex > 0 && (
			<button 
				onclick="previousMedia()"
				class="absolute left-4 z-10 p-3 bg-black/50 text-white rounded-full hover:bg-black/70 transition-colors"
			>
				<svg class="w-6 h-6" fill="currentColor" viewBox="0 0 24 24">
					<path d="M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"/>
				</svg>
			</button>
		)}

		{/* Media content */}
		<div class="max-w-full max-h-full flex items-center justify-center">
			{isVideo ? (
				<video 
					controls={!isSlideshow}
					autoplay={isSlideshow}
					muted={isSlideshow}
					class="max-w-full max-h-full object-contain"
					onended="isSlideshow && nextMedia()"
				>
					<source src={`/api/media/${currentMedia.id}/video`} type="video/mp4">
					Your browser does not support the video tag.
				</video>
			) : (
				<img 
					src={`/api/media/${currentMedia.id}/medium`}
					alt={`Photo of ${currentMedia.child_name}`}
					class="max-w-full max-h-full object-contain"
					loading="eager"
				/>
			)}
		</div>

		{/* Navigation arrows for slideshow */}
		{isSlideshow && showControls && currentIndex < mockMediaList.length - 1 && (
			<button 
				onclick="nextMedia()"
				class="absolute right-4 z-10 p-3 bg-black/50 text-white rounded-full hover:bg-black/70 transition-colors"
			>
				<svg class="w-6 h-6" fill="currentColor" viewBox="0 0 24 24">
					<path d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"/>
				</svg>
			</button>
		)}

		{/* Slideshow controls */}
		{isSlideshow && (
			<div class="absolute bottom-8 left-1/2 transform -translate-x-1/2 flex items-center space-x-4 bg-black/50 rounded-lg px-4 py-2">
				<button 
					onclick="toggleSlideshowPlayback()"
					class="p-2 text-white hover:bg-white/20 rounded transition-colors"
				>
					<svg id="play-icon" class="w-5 h-5 hidden" fill="currentColor" viewBox="0 0 24 24">
						<path d="M8 5v14l11-7z"/>
					</svg>
					<svg id="pause-icon" class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
						<path d="M6 19h4V5H6v14zm8-14v14h4V5h-4z"/>
					</svg>
				</button>
				
				<span class="text-white text-sm">
					<span id="slideshow-timer">5</span>s
				</span>
			</div>
		)}
	</div>

	<!-- Bottom Info Panel (only for single media view) -->
	{!isSlideshow && (
		<div class="bg-white border-t border-gray-200 max-h-96 overflow-y-auto">
			<!-- Reactions Bar -->
			<div class="flex items-center justify-between p-4 border-b border-gray-100">
				<div class="flex items-center space-x-4">
					<button 
						onclick="toggleReaction()"
						class={`flex items-center space-x-2 px-3 py-2 rounded-lg transition-colors ${
							currentMedia.reactions.user_has_reacted 
								? 'bg-red-50 text-red-600' 
								: 'hover:bg-gray-50'
						}`}
					>
						<svg class={`w-5 h-5 ${currentMedia.reactions.user_has_reacted ? 'fill-red-500' : 'fill-gray-400'}`} viewBox="0 0 24 24">
							<path d="M12 21.35l-1.45-1.32C5.4 15.36 2 12.28 2 8.5 2 5.42 4.42 3 7.5 3c1.74 0 3.41.81 4.5 2.09C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5c0 3.78-3.4 6.86-8.55 11.54L12 21.35z"/>
						</svg>
						<span class="text-sm font-medium">{currentMedia.reactions.hearts}</span>
					</button>
				</div>

				<button 
					onclick="shareMedia()"
					class="p-2 hover:bg-gray-50 rounded-lg transition-colors"
				>
					<svg class="w-5 h-5 text-gray-500" fill="currentColor" viewBox="0 0 24 24">
						<path d="M18 16.08c-.76 0-1.44.3-1.96.77L8.91 12.7c.05-.23.09-.46.09-.7s-.04-.47-.09-.7l7.05-4.11c.54.5 1.25.81 2.04.81 1.66 0 3-1.34 3-3s-1.34-3-3-3-3 1.34-3 3c0 .24.04.47.09.7L8.04 9.81C7.5 9.31 6.79 9 6 9c-1.66 0-3 1.34-3 3s1.34 3 3 3c.79 0 1.5-.31 2.04-.81l7.12 4.16c-.05.21-.08.43-.08.65 0 1.61 1.31 2.92 2.92 2.92s2.92-1.31 2.92-2.92S19.61 16.08 18 16.08z"/>
					</svg>
				</button>
			</div>

			<!-- Comments Section -->
			<div class="p-4">
				<h3 class="font-semibold text-gray-900 mb-3">Comments</h3>
				
				{/* Comments List */}
				<div class="space-y-3 mb-4">
					{currentMedia.comments.map((comment) => (
						<div class="flex space-x-3">
							<div class="w-8 h-8 bg-forest rounded-full flex items-center justify-center text-white text-sm font-medium">
								{comment.user_name[0]}
							</div>
							<div class="flex-1">
								<div class="flex items-center space-x-2 mb-1">
									<span class="font-medium text-sm text-gray-900">{comment.user_name}</span>
									<span class="text-xs text-gray-500">
										{new Date(comment.created_at).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
									</span>
								</div>
								<p class="text-sm text-gray-700">{comment.body}</p>
							</div>
						</div>
					))}
				</div>

				{/* Add Comment */}
				<div class="flex space-x-3">
					<div class="w-8 h-8 bg-sage rounded-full flex items-center justify-center text-white text-sm font-medium">
						Y
					</div>
					<div class="flex-1">
						<textarea 
							id="new-comment"
							placeholder="Add a comment..."
							class="w-full p-3 border border-gray-200 rounded-lg resize-none focus:ring-2 focus:ring-forest focus:border-transparent"
							rows="2"
						></textarea>
						<div class="mt-2 flex justify-end">
							<button 
								onclick="postComment()"
								class="px-4 py-2 bg-forest text-white rounded-lg text-sm font-medium hover:bg-forest/90 transition-colors"
							>
								Post
							</button>
						</div>
					</div>
				</div>
			</div>
		</div>
	)}
</div>

<script>
	let currentMediaIndex = 0;
	let slideshowInterval = null;
	let isPlaying = true;
	let slideshowDuration = 5000; // 5 seconds

	window.closeMediaViewer = function() {
		const viewer = document.getElementById('media-viewer');
		if (viewer) {
			viewer.remove();
		}
		// Clear any slideshow intervals
		if (slideshowInterval) {
			clearInterval(slideshowInterval);
			slideshowInterval = null;
		}
	};

	window.previousMedia = function() {
		if (currentMediaIndex > 0) {
			currentMediaIndex--;
			// TODO: Load previous media
			console.log('Loading previous media, index:', currentMediaIndex);
		}
	};

	window.nextMedia = function() {
		const mediaList = {/* mockMediaList would be passed here */};
		if (currentMediaIndex < 2) { // Using 3 as mock length
			currentMediaIndex++;
			// TODO: Load next media
			console.log('Loading next media, index:', currentMediaIndex);
		} else if (document.querySelector('[data-slideshow="true"]')) {
			// Loop back to beginning in slideshow mode
			currentMediaIndex = 0;
			console.log('Looping back to start of slideshow');
		}
	};

	window.toggleSlideshowPlayback = function() {
		isPlaying = !isPlaying;
		const playIcon = document.getElementById('play-icon');
		const pauseIcon = document.getElementById('pause-icon');
		
		if (isPlaying) {
			startSlideshowTimer();
			playIcon.classList.add('hidden');
			pauseIcon.classList.remove('hidden');
		} else {
			stopSlideshowTimer();
			playIcon.classList.remove('hidden');
			pauseIcon.classList.add('hidden');
		}
	};

	window.startSlideshowTimer = function() {
		if (slideshowInterval) {
			clearInterval(slideshowInterval);
		}
		
		let timeLeft = slideshowDuration / 1000;
		const timerElement = document.getElementById('slideshow-timer');
		
		slideshowInterval = setInterval(() => {
			timeLeft--;
			if (timerElement) {
				timerElement.textContent = timeLeft;
			}
			
			if (timeLeft <= 0) {
				nextMedia();
				timeLeft = slideshowDuration / 1000;
			}
		}, 1000);
	};

	window.stopSlideshowTimer = function() {
		if (slideshowInterval) {
			clearInterval(slideshowInterval);
			slideshowInterval = null;
		}
	};

	window.toggleReaction = function() {
		// TODO: Call API to toggle heart reaction
		console.log('Toggling heart reaction for media');
	};

	window.shareMedia = function() {
		// TODO: Implement sharing functionality
		console.log('Sharing media');
	};

	window.postComment = function() {
		const textarea = document.getElementById('new-comment');
		const commentText = textarea?.value.trim();
		
		if (commentText) {
			// TODO: Call API to post comment
			console.log('Posting comment:', commentText);
			textarea.value = '';
		}
	};

	window.showMediaOptions = function() {
		// TODO: Show media options modal (download, delete, etc.)
		console.log('Showing media options');
	};

	window.showAirPlayPicker = function() {
		// TODO: Show AirPlay device picker modal
		console.log('Showing AirPlay picker for slideshow');
	};

	// Initialize slideshow if in slideshow mode
	if (document.querySelector('[data-slideshow="true"]')) {
		startSlideshowTimer();
	}
</script>

<style>
	#media-viewer {
		backdrop-filter: blur(20px);
	}
</style>