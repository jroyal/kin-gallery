---
import Layout from '../layouts/Layout.astro';
import Header from '../components/Header.astro';
import { authenticateFromContext } from '../lib/auth.js';

// Get current user
const user = authenticateFromContext(Astro);

// Helper function to calculate age
function calculateAge(birthdate: string): string {
  const birth = new Date(birthdate);
  const today = new Date();
  const ageMs = today.getTime() - birth.getTime();
  const ageYears = Math.floor(ageMs / (1000 * 60 * 60 * 24 * 365.25));
  const ageMonths = Math.floor((ageMs % (1000 * 60 * 60 * 24 * 365.25)) / (1000 * 60 * 60 * 24 * 30.44));
  
  if (ageYears > 0) {
    return ageMonths > 0 ? `${ageYears} yr ${ageMonths} mos` : `${ageYears} yr`;
  } else {
    return `${ageMonths} mos`;
  }
}

// Fetch children data if user is authenticated
let children = [];
if (user) {
  try {
    const childrenResponse = await fetch(`${Astro.url.origin}/api/children`, {
      headers: {
        'CF-Access-Jwt-Assertion': Astro.request.headers.get('CF-Access-Jwt-Assertion') || ''
      }
    });
    if (childrenResponse.ok) {
      const childrenData = await childrenResponse.json();
      children = childrenData.children || [];
    }
  } catch (error) {
    console.error('Failed to fetch children:', error);
  }
}
---

<Layout title="Upload - KinGallery">
	{user ? (
		<div class="min-h-screen bg-parchment">
			<Header title="Upload Photos" showBackButton={true} />
			
			<div class="px-4 py-6">
				<!-- Upload Area -->
				<div class="bg-white rounded-lg shadow-sm border-2 border-dashed border-gray-300 p-8 text-center hover:border-forest transition-colors">
					<div class="max-w-sm mx-auto">
						<div class="w-16 h-16 mx-auto mb-4 bg-forest/10 rounded-full flex items-center justify-center">
							<svg class="w-8 h-8 text-forest" fill="currentColor" viewBox="0 0 24 24">
								<path d="M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"/>
							</svg>
						</div>
						
						<h3 class="text-lg font-heading font-semibold text-gray-900 mb-2">
							Upload Photos & Videos
						</h3>
						
						<p class="text-gray-600 mb-6">
							Drag and drop your photos here, or click to browse files.
						</p>
						
						<input 
							type="file" 
							id="fileInput"
							multiple 
							accept="image/*,video/*"
							class="hidden"
							onchange="handleFileUpload(this.files)"
						/>
						
						<button 
							onclick="document.getElementById('fileInput').click()"
							class="w-full py-3 px-6 bg-forest text-white font-medium rounded-lg hover:bg-forest/90 transition-colors"
						>
							Choose Files
						</button>
					</div>
				</div>

				<!-- Quick Actions -->
				<div class="mt-6 grid grid-cols-2 gap-4">
					<button class="flex items-center justify-center p-4 bg-white rounded-lg shadow-sm border border-gray-200 hover:shadow-md transition-all">
						<svg class="w-6 h-6 text-forest mr-3" fill="currentColor" viewBox="0 0 24 24">
							<path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm5 11h-4v4h-2v-4H7v-2h4V7h2v4h4v2z"/>
						</svg>
						<span class="font-medium text-gray-900">Take Photo</span>
					</button>
					
					<button class="flex items-center justify-center p-4 bg-white rounded-lg shadow-sm border border-gray-200 hover:shadow-md transition-all">
						<svg class="w-6 h-6 text-forest mr-3" fill="currentColor" viewBox="0 0 24 24">
							<path d="M17 10.5V7c0-.55-.45-1-1-1H4c-.55 0-1 .45-1 1v10c0 .55.45 1 1 1h12c.55 0 1-.45 1-1v-3.5l4 4v-11l-4 4z"/>
						</svg>
						<span class="font-medium text-gray-900">Record Video</span>
					</button>
				</div>

				<!-- Child Selection -->
				{children.length > 0 ? (
					<div class="mt-6 bg-white rounded-lg shadow-sm border border-gray-200 p-4">
						<h4 class="font-medium text-gray-900 mb-3">Select Child</h4>
						<div class="space-y-2">
							{children.map((child, index) => {
								const age = child.birthdate ? calculateAge(child.birthdate) : null;
								return (
									<label class="flex items-center" key={child.id}>
										<input 
											type="radio" 
											name="child" 
											value={child.id} 
											class="text-forest focus:ring-forest" 
											checked={index === 0}
										/>
										<span class="ml-3 text-gray-700">
											{child.name}{age ? ` (${age})` : ''}
										</span>
									</label>
								);
							})}
						</div>
					</div>
				) : (
					<div class="mt-6 bg-yellow-50 border border-yellow-200 rounded-lg p-4">
						<h4 class="font-medium text-yellow-800 mb-2">No Children Added</h4>
						<p class="text-yellow-700 text-sm mb-3">
							You need to add at least one child before uploading photos.
						</p>
						<a 
							href="/onboarding"
							class="inline-flex items-center px-4 py-2 bg-yellow-600 text-white text-sm font-medium rounded-md hover:bg-yellow-700 transition-colors"
						>
							Add Children
						</a>
					</div>
				)}

				<!-- Upload Progress (hidden by default) -->
				<div id="uploadProgress" class="mt-6 bg-white rounded-lg shadow-sm border border-gray-200 p-4 hidden">
					<h4 class="font-medium text-gray-900 mb-3">Uploading...</h4>
					<div class="w-full bg-gray-200 rounded-full h-2">
						<div id="progressBar" class="bg-forest h-2 rounded-full transition-all duration-300" style="width: 0%"></div>
					</div>
					<p class="text-sm text-gray-600 mt-2">
						<span id="uploadStatus">Preparing files...</span>
					</p>
				</div>
			</div>
		</div>
	) : (
		<div class="min-h-screen bg-parchment flex items-center justify-center">
			<div class="max-w-md mx-auto text-center p-6">
				<h2 class="text-2xl font-heading font-bold text-forest mb-4">
					Authentication Required
				</h2>
				<p class="text-gray-600 mb-6">
					Please sign in to upload photos and videos.
				</p>
				<a 
					href="/?simulate_user=dev@example.com"
					class="inline-flex items-center px-6 py-3 bg-forest text-white font-medium rounded-lg hover:bg-forest/90 transition-colors"
				>
					Sign In (Dev Mode)
				</a>
			</div>
		</div>
	)}
</Layout>

<script>
	function handleFileUpload(files) {
		if (!files || files.length === 0) return;
		
		console.log('Selected files:', files.length);
		
		// Show progress
		const progressDiv = document.getElementById('uploadProgress');
		const progressBar = document.getElementById('progressBar');
		const statusText = document.getElementById('uploadStatus');
		
		if (progressDiv && progressBar && statusText) {
			progressDiv.classList.remove('hidden');
		}
		
		// Real file upload implementation
		uploadFiles(files);
	}

	async function uploadFiles(files) {
		const progressBar = document.getElementById('progressBar');
		const statusText = document.getElementById('uploadStatus');
		const selectedChildId = getSelectedChildId();
		
		let totalFiles = files.length;
		let uploadedFiles = 0;
		let failedFiles = 0;

		for (let file of files) {
			try {
				if (statusText) {
					statusText.textContent = `Uploading ${file.name}... (${uploadedFiles + 1}/${totalFiles})`;
				}

				const formData = new FormData();
				formData.append('file', file);
				formData.append('child_id', selectedChildId);

				const response = await fetch('/api/upload', {
					method: 'POST',
					body: formData
				});

				if (response.ok) {
					const result = await response.json();
					console.log('Upload success:', result);
					uploadedFiles++;
				} else {
					const error = await response.text();
					console.error('Upload failed:', error);
					failedFiles++;
				}
			} catch (error) {
				console.error('Upload error:', error);
				failedFiles++;
			}

			// Update progress
			const progress = ((uploadedFiles + failedFiles) / totalFiles) * 100;
			if (progressBar) {
				progressBar.style.width = `${progress}%`;
			}
		}

		// Show final status
		if (statusText) {
			if (failedFiles === 0) {
				statusText.textContent = `Upload complete! ${uploadedFiles} files uploaded.`;
			} else {
				statusText.textContent = `Upload finished. ${uploadedFiles} succeeded, ${failedFiles} failed.`;
			}
		}

		// Redirect after success
		if (uploadedFiles > 0) {
			setTimeout(() => {
				window.location.href = '/';
			}, 2000);
		}
	}

	function getSelectedChildId() {
		const selectedRadio = document.querySelector('input[name="child"]:checked');
		return selectedRadio ? selectedRadio.value : '1';
	}
</script>