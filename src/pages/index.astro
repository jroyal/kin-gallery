---
import Layout from '../layouts/Layout.astro';
import AlbumsGrid from '../components/AlbumsGrid.astro';
import { runMigrations } from '../lib/db.js';
import { authenticateFromContext, isOnboardingRequired, createServerSideHeaders } from '../lib/auth.js';

// Initialize database on first load
runMigrations();

// Get current user for development
const user = authenticateFromContext(Astro);

// Check if onboarding is required
if (user && isOnboardingRequired()) {
  return Astro.redirect('/onboarding');
}

// Fetch real media data from API
let mediaData = null;
let childrenData = null;
if (user) {
  try {
    const headers = createServerSideHeaders(Astro.request);
    
    // Fetch recent media for hero photo and grid
    const mediaResponse = await fetch(`${Astro.url.origin}/api/media?limit=10`, { headers });
    if (mediaResponse.ok) {
      mediaData = await mediaResponse.json();
    }
    
    // Fetch children data for child info
    const childrenResponse = await fetch(`${Astro.url.origin}/api/children`, { headers });
    if (childrenResponse.ok) {
      childrenData = await childrenResponse.json();
    }
  } catch (error) {
    console.error('Failed to fetch data:', error);
  }
}

// Process data for AlbumsGrid
const recentMedia = mediaData?.media || [];
const children = childrenData?.children || [];

// Create hero media (most recent photo)
const heroMedia = recentMedia.length > 0 ? recentMedia[0] : null;

// Create child info (first child or most represented in recent media)
let childInfo = null;
if (heroMedia && children.length > 0) {
  const heroChild = children.find(c => c.id === heroMedia.child_id);
  if (heroChild) {
    const age = heroChild.birthdate ? calculateAge(heroChild.birthdate) : null;
    childInfo = {
      name: heroChild.name,
      age: age
    };
  }
}

// Helper function for age calculation
function calculateAge(birthdate: string): string {
  const birth = new Date(birthdate);
  const today = new Date();
  const ageMs = today.getTime() - birth.getTime();
  const ageYears = Math.floor(ageMs / (1000 * 60 * 60 * 24 * 365.25));
  const ageMonths = Math.floor((ageMs % (1000 * 60 * 60 * 24 * 365.25)) / (1000 * 60 * 60 * 24 * 30.44));
  
  if (ageYears > 0) {
    return ageMonths > 0 ? `${ageYears} yr ${ageMonths} mos` : `${ageYears} yr`;
  } else {
    return `${ageMonths} mos`;
  }
}
---

<Layout title="KinGallery - Family Photos">
	{user ? (
		<div>
			<!-- Debug info (temporary) -->
			{process.env.NODE_ENV !== 'production' && (
				<div class="p-4 bg-blue-50 border border-blue-200 rounded m-4">
					<h3 class="font-bold text-blue-800">Debug Info:</h3>
					<p class="text-blue-700">Total media: {mediaData?.pagination?.total || 0}</p>
					<p class="text-blue-700">Recent media count: {recentMedia.length}</p>
					<p class="text-blue-700">Hero media: {heroMedia ? heroMedia.filename : 'None'}</p>
					<p class="text-blue-700">Child info: {childInfo ? childInfo.name : 'None'}</p>
				</div>
			)}
			<AlbumsGrid 
				heroMedia={heroMedia}
				childInfo={childInfo}
				recentMedia={recentMedia.slice(1)}
				mediaCount={mediaData?.pagination?.total || 0}
			/>
		</div>
	) : (
		<!-- Development/Authentication Status Page -->
		<div class="min-h-screen bg-parchment">
			<div class="container mx-auto px-4 py-8">
				<header class="text-center mb-8">
					<h1 class="text-4xl font-heading font-bold text-forest mb-2">
						KinGallery
					</h1>
					<p class="text-moss text-lg">
						Ad-free family photo sharing
					</p>
				</header>

				<div class="max-w-2xl mx-auto bg-white rounded-lg shadow-md p-6">
					<h2 class="text-2xl font-heading font-semibold text-forest mb-4">
						Development Status
					</h2>

					<div class="mb-6 p-4 bg-yellow-100 rounded-lg">
						<p class="text-yellow-800">
							‚ö†Ô∏è No authentication detected. In production, this would require Cloudflare Access.
						</p>
						<p class="text-yellow-700 text-sm mt-2">
							Add <code>?simulate_user=test@example.com</code> to the URL to simulate authentication.
						</p>
					</div>

					<div class="space-y-4">
						<div>
							<h3 class="font-semibold text-forest mb-2">‚úÖ Backend Complete</h3>
							<ul class="text-moss space-y-1 ml-4">
								<li>‚Ä¢ SQLite database with migrations</li>
								<li>‚Ä¢ Media processing (Sharp + ffmpeg)</li>
								<li>‚Ä¢ Authentication system</li>
								<li>‚Ä¢ REST API endpoints</li>
								<li>‚Ä¢ PWA service worker</li>
							</ul>
						</div>

						<div>
							<h3 class="font-semibold text-forest mb-2">üöß Frontend Components (In Progress)</h3>
							<ul class="text-moss space-y-1 ml-4">
								<li>‚Ä¢ ‚úÖ Albums grid layout</li>
								<li>‚Ä¢ ‚úÖ Navigation system</li>
								<li>‚Ä¢ ‚úÖ Media cards and hero photos</li>
								<li>‚Ä¢ üöß Upload interface</li>
								<li>‚Ä¢ üöß Media viewer with comments</li>
								<li>‚Ä¢ üöß Admin dashboard</li>
							</ul>
						</div>

						<div class="mt-6 p-4 bg-moss/10 rounded-lg">
							<h3 class="font-semibold text-forest mb-2">API Endpoints Available</h3>
							<div class="text-sm text-moss space-y-1">
								<div><code>/api/health</code> - Service health check</div>
								<div><code>/api/auth/me</code> - Current user info</div>
								<div><code>/api/children</code> - Child management</div>
								<div><code>/api/upload</code> - Media upload</div>
								<div><code>/api/media</code> - Browse media</div>
								<div><code>/api/comments</code> - Comment system</div>
								<div><code>/api/reactions</code> - Heart reactions</div>
								<div><code>/api/admin/users</code> - User management</div>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
	)}
</Layout>
